{"version":3,"sources":["components/card/index.js","components/table/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","card","click","show","showSelected","isShuffling","className","classN","getClass","onClick","style","background","image","CardTable","useState","cards","setCards","deck","setDeck","selectedCards","setSelectedCards","correctCount","setCorrectCount","showFace","setShowFace","showSelectedCard","setShowSelectedCard","shuffling","setShuffling","lose","setLose","hasWon","setHasWon","getDeck","reset","axios","get","then","response","id","data","deck_id","handleCardClick","length","includes","setTimeout","array","i","j","Math","floor","random","temp","shuffleArray","useEffect","map","code","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAkCeA,MA/Bf,YAAiE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,YAe/C,OACI,yBAAKC,UAZQ,WACf,IAAIC,EAAS,QAQb,OAPIF,IACFE,GAAU,UAERJ,GAASC,IACXG,GAAU,cAGLA,EAGWC,GAAYC,QAAS,kBAAMP,EAAMD,KAC/C,yBACEK,UAAU,+BACVI,MAAO,CAAEC,WAAW,OAAD,OAASV,EAAKW,MAAd,QAErB,yBACEN,UAAU,8BACVI,MAAO,CAAEC,WAAW,OAAD,OArBzB,qHAqByB,U,MC6HdE,MAlJf,WAAsB,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEKF,mBAAS,IAFd,mBAEZG,EAFY,KAENC,EAFM,OAGuBJ,mBAAS,IAHhC,mBAGZK,EAHY,KAGGC,EAHH,OAIqBN,mBAAS,GAJ9B,mBAIZO,EAJY,KAIEC,EAJF,OAKaR,oBAAS,GALtB,mBAKZS,EALY,KAKFC,EALE,OAM6BV,oBAAS,GANtC,mBAMZW,EANY,KAMMC,EANN,OAOeZ,oBAAS,GAPxB,mBAOZa,EAPY,KAODC,EAPC,OAQKd,oBAAS,GARd,mBAQZe,EARY,KAQNC,EARM,OASShB,oBAAS,GATlB,mBASZiB,EATY,KASJC,EATI,KAenB,SAASC,EAAQC,IACF,KAATjB,GAAeiB,IACjBC,IACGC,IAAI,iEACJC,MAAK,SAAAC,GAOZ,IAAkBC,EANVrB,EAAQoB,EAASE,KAAKC,SAMZF,EALDD,EAASE,KAAKC,QAM7BN,IACGC,IADH,8CAC8CG,EAD9C,mBAEGF,MAAK,SAAAC,GAAQ,OAAItB,EAASsB,EAASE,KAAKzB,aAG7C,SAAS2B,EAAgBzC,GACvB,IAAI8B,IAAUF,EAAd,CAGA,GAA6B,IAAzBV,EAAcwB,OAEhBvB,EAAiB,GAAD,mBAAKD,GAAL,CAAoBlB,KACpCyB,GAAoB,GACpBJ,EAAgBD,EAAe,QAE1B,IAAKM,EAAW,CACrB,GAAKR,EAAcyB,SAAS3C,GAO1B,OAAO6B,GAAQ,GAJf,GAFAV,EAAiB,GAAD,mBAAKD,GAAL,CAAoBlB,KACpCqB,EAAgBD,EAAe,GACV,IAAjBA,EACF,OAAOW,GAAU,GAMlBL,IAMLC,GAAa,GACbiB,YAAW,WACTnB,GAAoB,GACpBF,GAAY,GACZR,EAQJ,SAAsB8B,GACpB,IAAK,IAAIC,EAAID,EAAMH,OAAS,EAAGI,EAAI,EAAGA,IAAK,CACzC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWJ,GAC/BK,EAAON,EAAMC,GACnBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKI,EAEb,OAAON,EAfIO,CAAatC,IACtB8B,YAAW,WACTrB,GAAY,GACZI,GAAa,KACZ,OACF,OAwBL,OAjFA0B,qBAAU,WACRrB,OAiFA,yBAAK3B,UAAU,SACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eAAc,8CAC7B,yBAAKA,UAAU,cACXuB,GAAiC,IAAzBV,EAAcwB,OAMtB,GALA,+GAOAd,GAAiC,IAAzBV,EAAcwB,OAGtB,GAFA,mDAIAd,GAAQV,EAAcwB,OAAS,EAC/B,yEAEA,GAEDd,EAAO,yCAAqB,GAC5BE,EAAS,wCAAoB,GAC7BF,GAAQE,EACP,4BAAQzB,UAAU,kBAAkBG,QArC9C,WACEmB,GAAa,GACbJ,GAAY,GACZJ,EAAiB,IACjBU,GAAQ,GACRE,GAAU,GACVN,GAAoB,GACpBJ,EAAgB,GAChBW,GAAQ,KA6BA,eAIA,IAGJ,yBAAK3B,UAAU,eACb,uBAAGA,UAAU,SAAb,UAA6Be,KAGjC,yBAAKf,UAAU,gBACZS,EAAMwC,KAAI,SAAAtD,GAAI,OACb,kBAAC,EAAD,CACEA,KAAMA,EACNC,MAAOwC,EACPvC,KAAMoB,EACNnB,aACEqB,GAAoBN,EAAc,GAAGqC,OAASvD,EAAKuD,KAErDnD,YAAasB,UCnIV8B,MARf,WACE,OACE,yBAAKnD,UAAU,OACb,kBAAC,EAAD,QCKcoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.5fd93f63.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nfunction Card({ card, click, show, showSelected, isShuffling }) {\r\n  const cardBack =\r\n    \"https://cdn.shopify.com/s/files/1/0200/7616/products/playing-cards-bicycle-rider-back-1_1024x1024.png?v=1535755695\";\r\n\r\n  const getClass = () => {\r\n    let classN = \"card \";\r\n    if(!isShuffling){\r\n      classN += \"ready \";\r\n    }\r\n    if(!show && !showSelected){\r\n      classN += \"is-flipped\";\r\n    }\r\n\r\n    return classN;\r\n  };\r\n  return (\r\n      <div className={getClass()} onClick={() => click(card)}>\r\n        <div\r\n          className=\"card__face card__face--front\"\r\n          style={{ background: `url(${card.image})` }}\r\n        ></div>\r\n        <div\r\n          className=\"card__face card__face--back\"\r\n          style={{ background: `url(${cardBack})` }}\r\n        ></div>\r\n      </div>\r\n  );\r\n}\r\n\r\n//<img className={getClass()} src={show || showSelected? card.image: cardBack} alt={card.code}></img>\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"../card\";\r\nimport \"./table.css\";\r\n\r\nfunction CardTable() {\r\n  const [cards, setCards] = useState([]);\r\n  const [deck, setDeck] = useState(\"\");\r\n  const [selectedCards, setSelectedCards] = useState([]);\r\n  const [correctCount, setCorrectCount] = useState(0);\r\n  const [showFace, setShowFace] = useState(false);\r\n  const [showSelectedCard, setShowSelectedCard] = useState(false);\r\n  const [shuffling, setShuffling] = useState(false);\r\n  const [lose, setLose] = useState(false);\r\n  const [hasWon, setHasWon] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getDeck();\r\n  });\r\n\r\n  function getDeck(reset) {\r\n    if (deck === \"\" || reset) {\r\n      axios\r\n        .get(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\")\r\n        .then(response => {\r\n          setDeck(response.data.deck_id);\r\n          getCards(response.data.deck_id);\r\n        });\r\n    }\r\n  }\r\n\r\n  function getCards(id) {\r\n    axios\r\n      .get(`https://deckofcardsapi.com/api/deck/${id}/draw/?count=8`)\r\n      .then(response => setCards(response.data.cards));\r\n  }\r\n\r\n  function handleCardClick(card) {\r\n    if (hasWon || lose) {\r\n      return;\r\n    }\r\n    if (selectedCards.length === 0) {\r\n      // handle first card picked\r\n      setSelectedCards([...selectedCards, card]);\r\n      setShowSelectedCard(true);\r\n      setCorrectCount(correctCount + 1);\r\n      //setShowFace(true);\r\n    } else if (!shuffling) {\r\n      if (!selectedCards.includes(card)) {\r\n        setSelectedCards([...selectedCards, card]);\r\n        setCorrectCount(correctCount + 1);\r\n        if (correctCount === 7) {\r\n          return setHasWon(true);\r\n        }\r\n      } else {\r\n        return setLose(true);\r\n      }\r\n    }\r\n    if (!shuffling) {\r\n      shuffleCardsEvent();\r\n    }\r\n  }\r\n\r\n  function shuffleCardsEvent() {\r\n    setShuffling(true);\r\n    setTimeout(() => {\r\n      setShowSelectedCard(false);\r\n      setShowFace(false);\r\n      setCards(shuffleArray(cards));\r\n      setTimeout(() => {\r\n        setShowFace(true);\r\n        setShuffling(false);\r\n      }, 1000);\r\n    }, 1000);\r\n  }\r\n\r\n  function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  function reset() {\r\n    setShuffling(false);\r\n    setShowFace(false);\r\n    setSelectedCards([]);\r\n    setLose(false);\r\n    setHasWon(false);\r\n    setShowSelectedCard(false);\r\n    setCorrectCount(0);\r\n    getDeck(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      <div className=\"tableBanner\">\r\n        <div className=\"bannertitle\"><h2>Casino Clicky</h2></div>\r\n        <div className=\"bannertext\">\r\n          {!lose && selectedCards.length === 0 ? (\r\n            <p>\r\n              Goal: Pick Cards from the shown cards and try not to pick one you\r\n              picked before!\r\n            </p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {!lose && selectedCards.length === 0 ? (\r\n            <p>Pick the first Card</p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {!lose && selectedCards.length > 0 ? (\r\n            <p>Now pick a card you have not picked before</p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {lose ? <h3>You Lost!</h3> : \"\"}\r\n          {hasWon ? <h3>You Won!</h3> : \"\"}\r\n          {lose || hasWon ? (\r\n            <button className=\"playAgainButton\" onClick={reset}>\r\n              Play Again?\r\n            </button>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div className=\"bannerScore\">\r\n          <p className=\"score\">SCORE: {correctCount}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"tableWrapper\">\r\n        {cards.map(card => (\r\n          <Card\r\n            card={card}\r\n            click={handleCardClick}\r\n            show={showFace}\r\n            showSelected={\r\n              showSelectedCard && selectedCards[0].code === card.code\r\n            }\r\n            isShuffling={shuffling}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardTable;\r\n","import React from 'react';\nimport './App.css';\nimport Table from \"./components/table\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}